

----- 实现原则 -----

当执行条件转移指令时，需要检验 EFlags寄存器 中的标志位

只有被检测的标志位处于特定状态，才会跳转到指定标记处

否则执行失败，继续按顺序执行下一条指令




----- 示例 -----

当某条指令的执行结果为0时，零标志ZF的的值，就会被特定指令设置为1

如，DEC会把它的操作数减一，若是操作数的值变成了0，ZF就会被设置为1

其中条件跳转指令JZ(零跳转)，就会检测ZF的值，发现ZF的值为1，执行跳转操作

若是ZF的值为0，跳转失败，程序会继续往下按顺序执行下一条指令


指令JNZ刚好与JZ相反


当操作数的值为0，JZ成立

当操作数的值不为0，JNZ成立



明天工作，构建条件指令表


----------------
----- je -----
----------------

等于才成立


----------------
----- jne -----
----------------

不等于才成立


mov ax,3

for:
	....
	....
	....
	dec ax    ; 每次条件循环，ax的值都减一
	cmp ax,0  ;
	jne for   ; 只要ax不等于0，条件就成立





----------------
----- jl -----
----------------

适用于有符号数的比较，条件是小于


mov ax,0

for:
	....
	....
	....
	inc ax      ; 每次条件循环，ax的值都加一

	cmp ax,10   ; 只要ax的值不于10，条件就成立

	jl for


----------------
----- jle -----
----------------

适用于有符号数的比较，条件是小于等于


mov ax,0

for:
	....
	....
	....
	inc ax      ; 每次条件循环，ax的值都加一

	cmp ax,10   ; 只要ax的值不大于10，条件就成立

	jle for




----------------
----- jge -----
----------------

适用于有符号数的比较，条件是大于等于


mov ax,10

for:
	....
	....
	....
	dec ax      ; 每次条件循环，ax的值都加一

	cmp ax,0    ; 只要ax的值大于等于0，条件就成立

	jle for




----------------
----- jg -----
----------------

适用于有符号数的比较，条件是大于


mov ax,10

for:
	....
	....
	....
	dec ax      ; 每次条件循环，ax的值都加一

	cmp ax,0    ; 只要ax的值大于0，条件就成立

	jle for
