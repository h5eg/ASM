    
---------------------------------
------------ 编译文件 ------------
---------------------------------
nasm -f <format><filename> [-o <output>]

-f 是用来指定输出文件的格式，默认二进制格式
-o 指定输出可执行文件的名称

---format---

bin，二进制格式，也是默认格式


示例：
nasm mbr.S -o mbr.bin <==>  nasm -f bin mbr.S -o mbr.bin





--- 相对地址计算方式 ---
标号位置处的汇编地址 减 跳转指令的汇编地址， 再减跳转指令的长度，最终得到要跳转的目标地址。

比如 here: jmp near here ，目标地址 与 当前跳转指令的地址间隔是0，在用0减去跳转指令长度3，最终得到一个负数。

怎么会是一个负数的地址？

用二进制 0000 0000 减去二进制 0000 0011 ，结果是 ...111111111101，下面描述计算步骤：
1. 0 减 1，0比1小，会导致0往左边借位，然而0的左边位都是0，借不到值，这就会导致无限借位，最终导致左边的值全部变成 1
2. 借位完之后就开始计算，第一位的 0减1 的结果是 1
3. 接着第二位 1 减 1，结果是0
4. 后面的都是 1 减 0，结果都是 1

回到 here: jmp near here，其本质是 0-3，也就是 0000-0011，最终得到...111111101，因为near限定了取16位的值，也就成了0xFFFD




--------------------------------
------------ dd命令 ------------
--------------------------------

dd命令，用于磁盘操作，可以深入磁盘的任何一个扇区，也可以删除 Linux 操作系统自己的文件

虚拟环境：dd  if=/your_path/mbr.bin  of=/your_path/bochs/hd60M.img  bs=512  count=1  conv=notrunc

实际环境：dd  if=/obj/ASM/05mbr.bin  of=/dev/disk2  bs=512  count=1  conv=notrunc



参数选项：
if = 要写入的文件
of = 输出到文件
bs=<字节数>   ：将 输入与输出 设成指定的字节数
cbs=<字节数>  ：转换时，每次只转换指定的字节数
conv=<关键字> ：指定文件转换的方式
count=<区块数>：仅读取指定的区块数
ibs=<字节数>  ：每次读取的字节数
obs=<字节数>  ：每次输出的字节数
seek=<区块数> ：一开始输出时，跳过指定的区块数
skip=<区块数> ：一开始读取时，跳过指定的区块数
--help   ：帮助
--version：显示版本信息



count=blocks 只拷贝输入的blocks块。

conv = ASCII 把EBCDIC码转换为ASCIl码。

conv = ebcdic 把ASCIl码转换为EBCDIC码。

conv = ibm 把ASCIl码转换为alternate EBCDIC码。

conv = block 把变动位转换成固定字符。

conv = ublock 把固定位转换成变动位。

conv = ucase 把字母由小写转换为大写。

conv = lcase 把字母由大写转换为小写。

conv = notrunc 不截断输出文件。

conv = swab 交换每一对输入字节。

conv = noerror 出错时不停止处理。

conv = sync 把每个输入记录的大小都调到ibs的大小（用NUL填充）。




----- mac上使用dd命令 ----

在mac上使用dd对磁盘进行写入时，需要先释放目标磁盘：diskutil umountDisk /dev/disk3

util:工具
umountDisk:卸载文件系统

mac上查看磁盘信息：diskutil list  或  df -h




