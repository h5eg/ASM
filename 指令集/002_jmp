


jmp，无条件跳转指令，跳转到指定位置执行指令


-----------------------
----- 8位段内跳转 -----
-----------------------

jmp short start，关键字 short 是必须的


操作数大小限定为一字节，因此只允许转移到距离当前jmp指令 -128～127 字节范围的地方




---- 实现原理 ----

1.在编译阶段，编译器会先检查 目标标号 所代表的汇编地址值，距离当前指令位置的距离是否在有效范围

2.如果相对偏移值不在有效范围，直接报错

3.如果目标位置有效，开始计算距离目标位置的相对偏移值(分正负)

4.计算方式: 编译器会用目标位置的汇编地址，减当前指令的汇编地址，再减当前指令的长度2，保留1字节结果值，作为相对偏移值

5.接着将IP寄存器的值加上相对偏移值


为何要减当前指令的长度2？

CPU在读取到jmp指令后，会自动将IP寄存器的值加上 jmp short 指令的长度，之后才开始执行jmp指令的工作

因此在计算完相对偏移值时，需要减去指令 jmp short 的长度


jmp short start

msg db "1+2+3+...+100="

start:
    ....
	....
	....




------------------------
----- 16位段内跳转 -----
------------------------

jmp near start，关键字 near 是必须的

原理跟 jmp short 相似

相对偏移值是16位的有符号数，因此跳转的距离范围在 -32768 ～ 32767 字节区间






----------------------------
----- 16位间接段内跳转 -----
----------------------------

跳转到的 目标偏移地址 不是在指令中直接给出，而是用16位的通用寄存器 或 内存地址来间接给出

处理器会先获取值，并将该值写入到指针寄存器IP中


jmp near bx    ; 寄存器bx中的值，会被作为目标偏移地址

jmp [0x3012]   ; 内存地址 [DS:0x3012] 中的值，会被作为目标偏移地址


关键字 near 不是必须的，间接绝对近转移就代表了16位的段内近转移


jmp1 dw 0xA000  ; 假设 0xA000 就是相对目标的偏移地址

jmp [jmp1]      ; 跳转时应该这么写




-----------------------
----- 16位跨段跳转 -----
-----------------------

jmp 0x0000:0x7c00

段地址写入CS寄存器中，偏移地址写入IP寄存器中

16位只限制偏移地址值




--------------------------
----- 16位间接跨段跳转 -----
--------------------------

要跳转到的目标地址，需要访问内存才能得到

jmp1 dw 0x0020,0xA000   ; 这两个值分别代表目标位置的 偏移地址 和 段地址

jmp far [jmp1]

关键字 far 必须写










