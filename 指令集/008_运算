
----------------
--- 加一指令 ---
----------------

inc，操作数可以是8位或16位的寄存器，也可以是8位或16位的内存单元地址。

inc ax

inc al

inc byte [0x01]

inc word [0x03]




----------------
--- 减一指令 ---
----------------

dec，用于目标操作数内容减一

dec ax



--------------
----- 加 -----
--------------

add ax,dx

将 ax的值 与 dx的值 相加，结果存放到 ax，dx中的值不变


----- 二进制值相加 -----

0 + 0 = 0
0 + 1 = 1
1 + 1 = 10


  0111
+ 1110
-------
     1

   1     ; 1+1得到10，向高位进1
  0111
+ 1110
-------
    01

  11     ; 1+1得10，进1，0+1得1
  0111
+ 1110
-------
   101

  11    ; 0+1得1，1+1得10
  0111
+ 1110
-------
 10101


----------------
--- 减 ---
----------------
sub ax,dx

AX值 减去 DX值，结果保存在AX中





--------------------------------
----- 16位与8位的除法运算 ------
--------------------------------

; 用16位的二进制数 除以 8位的二进制数

; 被除数：必须在寄存器 AX 中

; 除数：由8位的通用寄存器 或 内存单元提供

; 结果：商在寄存器AL中，余数在 寄存器AH 中


; 示例：
; mov ax,addr ，设置被除数
; mov bl,10   ，设置除数
; div bl      ，开始运算




--------------------------------
----- 32位与16位的除法运算 ------
--------------------------------

; 用32位的二进制数 除以 16位的二进制数

; 被除数：高16位在DX中，低16位在AX中

; 除数：由16位的通用寄存器 或 内存单元提供

; 结果：商在AX中，余数在DX中

; 示例：
; mov dx,0x11
; mov ax,0x22
; div word [0x0123]




