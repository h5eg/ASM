

无条件跳转指令，告诉cpu去执行指定内存地址处的指令。


-----------------------
----- 8位段内转移 -----
-----------------------

jmp short start  ; 跳转到 start 处执行指令


属于段内转移，操作数大小为一字节，因此只允许转移到距离当前jmp指令 -128～127 字节范围的地方。

关键字 short 是必须的。


---- 实现原理 ----

1.在编译阶段，编译器会先检查 目标标号 所代表的汇编地址值，距离当前指令位置的距离是否在有效范围。

2.如果不在有效范围，直接报错。如果目标位置有效，开始计算距离目标位置的相对偏移量值

3.编译器会用目标位置的汇编地址，减去当前指令的汇编地址，在减去当前指令的长度2，保留1字节结果值，作为相对偏移量。

4.处理器执行完jmp指令后，会自动将IP寄存器的值加上 jmp short 指令的长度

5.因此在计算相对偏移量时，需要减去指令 jmp short 的长度


jmp start

msg db "1+2+3+...+100="

start:
    ....
	....
	....




------------------------
----- 16位段内转移 -----
------------------------

jmp near start

属于段内转移，跟 jmp short 原理相似。

只是相对偏移量的值允许是16位的有符号数，即允许跳转的距离范围在 -32768 ～ 32767 字节区间。

关键字 near 是必须的。




----------------------------
----- 16位间接段内转移 -----
----------------------------

属于段内转移。

跳转到的目标偏移地址不是在指令中直接给出，而是用16位的通用寄存器 或 内存地址来间接给出。


jmp near bx    ; 寄存器bx中的值，会被作为目标偏移地址

jmp [0x3012]   ; 内存地址 [DS:0x3012] 中的值，会被作为目标偏移地址


关键字 near 不是必须的，间接绝对近转移就代表了16位的段内近转移。



目标偏移地址位置内存中是常见的。

jmp1 dw 0xA000  ; 假设 0xA000 就是相对目标的偏移地址

jmp [jmp1]      ; 跳转时应该这么写。

处理器会先获取 jmp1 内存位置中的值，并将该值传递给指针寄存器IP




-----------------------
----- 16位跨段转移 -----
-----------------------

jmp 0x0000:0x7c00

段地址送入CS寄存器中，偏移地址送入IP寄存器中。

16位的意思是，限定偏移地址部分。




--------------------------
----- 16位间接跨段转移 -----
--------------------------

要转移到的目标地址，需要访问内存才能得到。

操作数可以是任何一种内存寻址方式。

jmp1 dw 0x0020,0xA000   ; 这两个值分别代表目标位置 偏移地址 和 段地址

jmp far [jmp1]

关键字 far 必须写，否则会被看成是 16位间接绝对近转移。










