


寄存器，是位于CPU内部的存储空间，用来辅助CPU运行指令


----------------------
---- CS 与 IP ----
----------------------

----- 作用 -----

CPU自启动，就开始读取指令，并执行指令

具体要读取内存地址上的哪条指令，由CPU内部的 代码段寄存器CS 和 指令指针寄存器IP 来决定

当执行完指令后，处理器会根据当前指令的大小，来改变寄存器IP的值，指向下一条要执行指令所在的内存地址


----- 实现方式 -----

8086地址是20位的，而 CS 和 IP 都是16位的，16位值+16位值 最大也不过是17位的值
    
因此Intel整出了 CS:IP 的模式，来实现 16位寄存器 可组成20位地址

Intel将CS的值左移4位，再将得到的20位值加上IP，得到最终的物理内存地址

通过得到的物理内存地址，CPU就知道要执行内存上的哪条指令了





-----------------------
------- 段寄存器 -------
-----------------------

CS，代码段 寄存器
DS，数据段 寄存器
ES，附加段 寄存器
SS，栈段  寄存器

注意：Intel处理器不允许直接将 立即数 传送到 段寄存器



    


-------------------------
---- 8个16位通用寄存器 ----
-------------------------

AX，累加器
BX，基址寄存器
CX，计数器寄存器
DX，数据寄存器
SI，源索引寄存器
DI，目标索引寄存器
BP，基数指针寄存器(base pointer)
SP，栈指针寄存器



在8086中，可用来提供偏移地址计算的寄存器只有：BX, SI, DI, BP




-------------------------
---- 8个8位通用寄存器 ----
-------------------------

寄存器 AX, BX, CX, DX 各自又可以拆分成 两个8位 的寄存器

AX => AH, AL
BX => BH, BL
CX => CH, CL
DX => DH, DL




-------------------------
------ 指令预存空间 ------
-------------------------

为了更好的发挥CPU效率，8086内部有一个 6字节 的指令预存空间。

在处理器执行指令时，指令预取部件 会从内存中获取接下来要执行的指令。






-------------------------------
--- 32位 和 64位 的通用寄存器 ---
-------------------------------

32位：EAX, EBX, ECX, EDX, ESI, EDI, ESP, EBP, EIP

64位：RAX, RBX, RCX, RDX, RSI, RDI, RSP, RBP, RIP, R8 ~ R15






----------------------------
------ 16位的标志寄存器 ------
----------------------------

 _ | _ | _ | _ | OF | DF | IF | TF | SF | ZF | _ | AF | _ | PF | _ | CF



DF：方向标志位，通过将该位清零或置1，从而控制 movsb 和 movsw 的传输方向

通过命令 cld 将 DF 设置为0，传输方向为低地址到高地址
通过命令 std 将 DF 设置为1，传输方向为高地址到低地址



SF：符号标志，有些指令会根据该位的值来进行判断，比如条件转移指令 jns

很多算数逻辑运算都会影响该位，如果计算结果的最高位是0，处理器会把 SF 设置为0，否则设置为1







