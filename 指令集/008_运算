
----------------
--- 加一指令 ---
----------------

inc，操作数可以是8位或16位的寄存器，也可以是8位或16位的内存单元地址。

inc ax

inc al

inc byte [0x01]

inc word [0x03]




----------------
--- 减一指令 ---
----------------

dec，用于目标操作数内容减一

dec ax




--------------
----- 加 -----
--------------

add ax,dx

将 ax 与 dx 相加，结果存放到 ax，dx中的值不变


----- 二进制值相加 -----

0 + 0 = 0
0 + 1 = 1
1 + 1 = 10


  0111
+ 1110
-------
     1

   1     ; 1+1得到10，向高位进1
  0111
+ 1110
-------
    01

  11     ; 1+1得10，进1，0+1得1
  0111
+ 1110
-------
   101

  11    ; 0+1得1，1+1得10
  0111
+ 1110
-------
 10101




--------------
----- 减 -----
--------------

sub ax,dx   ; AX 减去 DX，结果保存在AX




--------------
----- 乘 -----
--------------

1.寄存器AL中的值，与8位的通用寄存器 或 内存单元提供的8位的值 相乘

  结果是16位的，存放在AX中


2.寄存器AX中的值，与16位的通用寄存器 或 内存单元提供的16位的值 相乘

  结果是32位的，高16位存放在存放在DX中，低16位存放在AX中


mov al,2
mov bl,3
mul bl   ; al*bl，结果存放在AX中

mov ax,200
mov bx,300
mul bx   ; ax*bx，结果存放在DX:AX中


----- 乘法的其他实现方式 -----

通过 SHL 和 ADD 的组合，可以做到乘法的另一种实现

1.如果一个数要乘以4，直接使用SHL将这个数左移4次即可

2.如果一个数要乘以3，先使用SHL将数值左移2位，再把得到的结果与被乘数的一份复制值相加



-----------------------------
----- 16位与8位的除法运算 -----
-----------------------------

用16位的二进制数 除以 8位的二进制数

被除数：必须在寄存器 AX 中

除数：由8位的通用寄存器 或 内存单元提供

结果：商在寄存器AL中，余数在 寄存器AH中



mov ax,0x1234  ; 设置被除数
mov bl,10      ; 设置除数
div bl         ; 开始运算




--------------------------------
----- 32位与16位的除法运算 ------
--------------------------------

用32位的二进制数 除以 16位的二进制数

被除数：高16位在DX中，低16位在AX中

除数：由16位的通用寄存器 或 内存单元提供

结果：商在AX中，余数在DX中


mov dx,0x11
mov ax,0x22
div word [0x0123]




